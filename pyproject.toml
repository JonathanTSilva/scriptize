[project]
name = "scriptize"
version = "0.1.0"
description = "Improve maintainability, readability, and efficiency of your scripts by standardize your scripting environment."
authors = [
    {name = "Jonathan T. da Silva",email = "jonathantosilva@hotmail.com"}
]
license = {text = "LICENSE"}
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
]

[tool.poetry]
package-mode = false

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
ruff = "^0.12.1"
taskipy = "^1.14.1"
mypy = "^1.16.1"
pydantic = "^2.11.7"

[tool.poetry.group.doc.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.15"
mkdocstrings = "^0.29.1"
mkdocstrings-python = "^1.16.12"


[tool.poetry.group.template.dependencies]
typer = "^0.16.0"
rich = "^14.0.0"
validators = "^0.35.0"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 100
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]

# Putting an entry in `ignore` will ignore all errors that start with that string.
# For example, adding `T` will ignore all errors beginning with `T`,
# whereas adding `T20` will only ignore the `T20` error
# (and probably any errors that start with `T20`)
ignore = [
            'Q000', # flake8-quotes.inline-quotes="double
            'Q003',
            'COM812',
            'FIX002',
]
fixable = ["ALL"]  # ['A', 'B', 'C', 'D', 'E', 'F', 'Q']
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# I like the google docstyle
# See https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html
# and http://google.github.io/styleguide/pyguide.html
# https://gist.github.com/redlotus/3bc387c2591e3e908c9b63b97b11d24e
[tool.ruff.lint.pydocstyle]
convention = 'google'  # Or 'numpy', or 'pep257'

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pytest.ini_options]
pythonpath = [
    ".", "scriptize",
]
addopts = "--doctest-modules"

[tool.taskipy.tasks]
# TODO: Create a task pre_docs to generate all the bash docs with shdoc and link them to the mkdocs
lint = "ruff check . && isort --check --diff . | colordiff"
lint_fix = "ruff check . --fix"
format = "ruff format . && isort ."
typecheck = "mypy ."
docs = "mkdocs serve"
pre_test = "task lint && task typecheck"
test = "pytest -s -x --cov=python -vv"
post_test  = "coverage html"

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
warn_unused_ignores = true
warn_return_any = true
plugins = ["pydantic.mypy"]
exclude = 'migrations|tests/fixtures'
